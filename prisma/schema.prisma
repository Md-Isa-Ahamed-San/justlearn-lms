// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb" // Keep "mongodb" if you're staying with MongoDB
  url      = env("DATABASE_URL") // Make sure this is set in your .env file
  relationMode = "prisma"
}

// Mongoose: AssessmentSchema
// Fields: assessments (Array), otherMarks (Number)
// Referenced by: Report
model Assessment {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  // Mongoose Array type is ambiguous. Mapping to Json for flexibility.
  // You might refine this if 'assessments' is an array of simple types (e.g., String[], Int[], Float[])
  assessments Json
  otherMarks  Float // Assuming marks can be non-integer
  reports     Report? @relation // One Assessment can be related to at most one Report via the quizAssessment field

  @@map("assessments") // Maps the model name to a collection name
}

// Mongoose: CategorySchema
// Fields: title (String), description (String), thumbnail (String)
// Referenced by: Course
model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  thumbnail   String

  courses Course[] // One Category has many Courses

  @@map("categories")
}

// Mongoose: CourseSchema
// Fields: title (String), subtitle (String), description (String), thumbnail (String),
//         modules ([ObjectId]), price (Number), active (Boolean), category (ObjectId),
//         instructor (ObjectId), quizSet (ObjectId), testimonials ([ObjectId]),
//         learning ([String]), createdOn (Date), modifiedOn (Date)
// Referenced by: Enrollment, Report, Testimonial, Module (via course field)
model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String?
  description String
  thumbnail   String?
  price       Float    @default(0) // Assuming price can have decimals
  active      Boolean  @default(false)
  learning    String[] // Array of strings

  createdOn  DateTime @default(now())
  modifiedOn DateTime @default(now()) @updatedAt

  // Relations
  categoryId String?   @db.ObjectId // Foreign key for Category (optional based on Mongoose schema reference)
  category   Category? @relation(fields: [categoryId], references: [id]) // Many Courses belong to one Category

  instructorId String? @db.ObjectId // Foreign key for User (instructor) (optional based on Mongoose schema reference)
  instructor   User?   @relation("TaughtCourses", fields: [instructorId], references: [id]) // Many Courses taught by one User

  quizSetId String?  @db.ObjectId // Foreign key for Quizset (optional based on Mongoose schema reference)
  quizSet   Quizset? @relation(fields: [quizSetId], references: [id]) // Many Courses can share one Quizset

  // Back-relations (lists of models referencing this Course)
  modules      Module[] // One Course has many Modules (Module links back to Course)
  testimonials Testimonial[] // One Course has many Testimonials (Testimonial links back to Course)
  enrollments  Enrollment[] // One Course has many Enrollments (Enrollment links back to Course)
  reports      Report[] // One Course has many Reports (Report links back to Course)

  @@map("courses")
}

// Mongoose: EnrollmentSchema
// Fields: enrollment_date (Date), status (String), completion_date (Date),
//         method (String), course (ObjectId), student (ObjectId)
model Enrollment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  enrollment_date DateTime
  status          String
  completion_date DateTime? // Optional
  method          String

  // Relations
  courseId String @db.ObjectId // Foreign key for Course
  course   Course @relation(fields: [courseId], references: [id]) // Many Enrollments for one Course

  studentId String @db.ObjectId // Foreign key for User (student)
  student   User   @relation(fields: [studentId], references: [id]) // Many Enrollments for one User

  @@map("enrollments")
}

// Mongoose: LessonSchema
// Fields: title (String), description (String), duration (Number), video_url (String),
//         active (Boolean), slug (String), access (String), order (Number)
// Referenced by: Module (via lessonIds), Watch
model Lesson {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int     @default(0) // Assuming duration in seconds/minutes
  video_url   String?
  active      Boolean @default(false)
  slug        String
  access      String  @default("private") // Consider using an Enum for fixed options like "private", "public"
  order       Int

  // Relations
  // Mongoose Module.lessonIds implies a Module has many Lessons
  moduleId String @db.ObjectId // Foreign key for Module
  module   Module @relation(fields: [moduleId], references: [id]) // Many Lessons belong to one Module

  // Back-relations
  watches Watch[] // One Lesson can have many Watch entries (for different users)

  @@map("lessons")
}

// Mongoose: ModuleSchema
// Fields: title (String), description (String), active (Boolean), slug (String),
//         course (ObjectId - required but ref missing in snippet), lessonIds ([ObjectId]), order (Number)
// Referenced by: Course (via modules), Watch
model Module {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  active      Boolean @default(false)
  slug        String
  order       Int

  // Relations
  // Mongoose schema implies a Module MUST belong to a Course
  courseId String @db.ObjectId // Foreign key for Course
  course   Course @relation(fields: [courseId], references: [id]) // Many Modules belong to one Course

  // Back-relations
  lessons Lesson[] // One Module has many Lessons (Lesson links back to Module)
  watches Watch[] // One Module can have many Watch entries

  @@map("modules")
}

// Mongoose: QuizsetSchema
// Fields: title (String), description (String), slug (String), quizIds ([ObjectId]), active (Boolean)
// Referenced by: Course, Quiz (via quizIds)
model Quizset {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  slug        String?
  active      Boolean @default(false)

  // Back-relations
  quizzes Quiz[] // One Quizset has many Quizzes (Quiz links back to Quizset)
  courses Course[] // One Quizset can be linked to many Courses

  @@map("quizsets")
}

// Mongoose: QuizzesSchema (Model name is Quiz)
// Fields: title (String), description (String), explanations (String),
//         slug (String), options (Array), mark (Number)
// Referenced by: Quizset (via quizIds)
model Quiz {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  explanations String?
  slug         String?
  // Mongoose Array type is ambiguous. Mapping to Json for flexibility.
  // You might refine this if 'options' is an array of simple types (e.g., String[])
  options      Json?
  mark         Int     @default(5) // Assuming mark is an integer

  // Relations
  // Mongoose Quizset.quizIds implies a Quiz MUST belong to a Quizset
  quizSetId String  @db.ObjectId // Foreign key for Quizset
  quizSet   Quizset @relation(fields: [quizSetId], references: [id]) // Many Quizzes belong to one Quizset

  @@map("quizzes")
}

// Mongoose: ReportSchema
// Fields: totalCompletedLessons (Array), totalCompletedModeules (Array),
//         course (ObjectId), student (ObjectId), quizAssessment (ObjectId), completion_date (Date)
// Referenced by: Course, User, Assessment
model Report {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  // Mongoose Array type. Assuming these are arrays of IDs (strings).
  totalCompletedLessons String[]
  totalCompletedModules String[]

  completion_date DateTime? // Optional

  // Relations
  courseId String @db.ObjectId // Foreign key for Course
  course   Course @relation(fields: [courseId], references: [id]) // Many Reports for one Course

  studentId String @db.ObjectId // Foreign key for User (student)
  student   User   @relation(fields: [studentId], references: [id]) // Many Reports for one User

  // Mongoose quizAssessment reference. Assuming many Reports can reference the same Assessment (e.g., a shared quiz attempt result?)
  // If it's strictly one Report per Assessment, add @unique to quizAssessmentId
  quizAssessmentId String?     @unique @db.ObjectId
  quizAssessment   Assessment? @relation(fields: [quizAssessmentId], references: [id])

  @@map("reports")
}

// Mongoose: TestimonialSchema
// Fields: content (String), user (ObjectId), courseId (ObjectId), rating (Number)
// Referenced by: User, Course
model Testimonial {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  rating  Int // Assuming integer rating like 1-5 stars

  // Relations
  userId String @db.ObjectId // Foreign key for User
  user   User   @relation(fields: [userId], references: [id]) // Many Testimonials by one User

  // Mongoose schema had 'courseId' as the relation field name
  courseId String @db.ObjectId // Foreign key for Course
  course   Course @relation(fields: [courseId], references: [id]) // Many Testimonials for one Course

  @@map("testimonials")
}

// Mongoose: UserSchema
// Fields: firstName (String), lastName (String), password (String), email (String),
//         phone (String), role (String), bio (String), socialMedia (Object),
//         profilePicture (String), designation (String)
// Referenced by: Course (instructor), Enrollment (student), Report (student),
//                Testimonial (user), Watch (user)
model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  password       String // Remember to hash passwords before saving!
  email          String  @unique // Email should likely be unique
  phone          String?
  role           String // Consider using an Enum for fixed roles like "student", "instructor", "admin"
  bio            String?
  // Mongoose Object type. Mapping to Json for flexibility.
  socialMedia    Json?
  profilePicture String?
  designation    String?

  // Back-relations (lists of models referencing this User)
  taughtCourses Course[]      @relation("TaughtCourses") // One User can teach many Courses (named relation to distinguish from other potential Course links)
  enrollments   Enrollment[] // One User has many Enrollments (as student)
  reports       Report[] // One User has many Reports (as student)
  testimonials  Testimonial[] // One User wrote many Testimonials
  watches       Watch[] // One User has many Watch entries

  @@map("users")
}

// Mongoose: WatchSchema
// Fields: state (String), created_at (Date), modified_at (Date),
//         lesson (ObjectId), user (ObjectId), module (ObjectId), lastTime (Number)
model Watch {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  state       String   @default("started") // Consider using an Enum like "started", "completed", "paused"
  created_at  DateTime @default(now())
  modified_at DateTime @default(now()) @updatedAt // Automatically updates on change
  lastTime    Int      @default(0) // Assuming time in seconds

  // Relations
  lessonId String @db.ObjectId // Foreign key for Lesson
  lesson   Lesson @relation(fields: [lessonId], references: [id]) // Many Watch entries for one Lesson

  userId String @db.ObjectId // Foreign key for User
  user   User   @relation(fields: [userId], references: [id]) // Many Watch entries for one User

  moduleId String @db.ObjectId // Foreign key for Module
  module   Module @relation(fields: [moduleId], references: [id]) // Many Watch entries for one Module

  @@map("watches")
}
