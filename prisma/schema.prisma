// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider     = "mongodb" // Keep "mongodb" if you're staying with MongoDB
  url          = env("DATABASE_URL") // Make sure this is set in your .env file
  relationMode = "prisma"
}

// MARK: User C
model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  password       String
  email          String  @unique
  phone          String?
  role           String
  bio            String?
  designation    String?
  profilePicture String?
  socialMedia    Json?

  // Relations
  coursesAsInstructor Course[]      @relation("InstructorCourses")
  enrollments         Enrollment[]
  testimonials        Testimonial[]
  watches             Watch[]
  certificates        Certificate[]
  reports             Report[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

// MARK: Course C
model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String?
  description String
  thumbnail   String?
  price       Int      @default(0)
  active      Boolean  @default(false)
  learning    String[]
  createdOn   DateTime? @default(now())
  modifiedOn  DateTime? @updatedAt

  // ðŸ”— Relations

  // Category relation
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  // Instructor relation (from User model)
  instructor   User   @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String @db.ObjectId

  // Modules (one-to-many)
  modules Module[]

  // Testimonials (one-to-many)
  testimonials Testimonial[]

  // Enrollments (one-to-many)
  enrollments Enrollment[]

  // Quiz set (optional one-to-one)
  quizSet   QuizSet? @relation(fields: [quizSetId], references: [id])
  quizSetId String?  @db.ObjectId

  // Reports (one-to-many)
  reports Report[]
}

// MARK: Category C
model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  thumbnail   String
  courses     Course[]
}

// MARK: Module c but relation need to change
model Module {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  active      Boolean @default(false)
  slug        String
  order       Int

  // Relations
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  lessons   Lesson[] @relation(fields: [lessonIds], references: [id])
  lessonIds String[] @db.ObjectId

  // Add this line:
  watches Watch[] // ðŸ‘ˆ Back-reference
}

//MARK: Lesson c but need to verify the relation
model Lesson {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int     @default(0)
  videoUrl    String? @map("video_url")

  active Boolean @default(false)
  slug   String
  access String  @default("private")
  order  Int

  // Relations
  modules   Module[] @relation(fields: [moduleIds], references: [id])
  moduleIds String[] @db.ObjectId
  watches   Watch[]
}

//MARK : Watch c but need to verify the relation 
model Watch {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime? @default(now()) @map("created_at")
  modifiedAt DateTime? @updatedAt @map("modified_at")
  state      String   @default("started")
  lastTime   Int      @map("last_time")

  // Relations
  lessonId String @db.ObjectId
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  moduleId String? @db.ObjectId
  module   Module? @relation(fields: [moduleId], references: [id])
}

// MARK: Quiz c need to verify relation
model Quiz {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title        String
  description  String
  options      Json[] // Assuming this is static option config per quiz
  explanations String
  mark         Int    @default(5)
  slug         String

  // Relations
  quizSets   QuizSet[] @relation(fields: [quizSetIds], references: [id])
  quizSetIds String[]  @db.ObjectId

  assessments AssessmentItem[] // Link to AssessmentItem, not Assessment directly
}

//MARK : QUIZSET C NEED to
model QuizSet {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  slug   String
  active Boolean @default(false)

  // Relations
  quizzes Quiz[]   @relation(fields: [quizIds], references: [id])
  quizIds String[] @db.ObjectId
  courses Course[]
}

//need to fix it
//MARK:Assessment
model Assessment {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  otherMarks Int

  // Relations
  items  AssessmentItem[] // ðŸ‘ˆ Add this
  report Report?          @relation(name: "ReportAssessment")
}

//MARK:AssessmentItem
model AssessmentItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  attempted Boolean @default(false)

  // Relations
  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  assessmentId String     @db.ObjectId
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  options Option[] // one-to-many
}

//MARK: Option
model Option {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  option     String
  isCorrect  Boolean
  isSelected Boolean

  assessmentItemId String         @db.ObjectId
  assessmentItem   AssessmentItem @relation(fields: [assessmentItemId], references: [id])
}

// MARK: Enrollment and Certification
model Enrollment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  enrollmentDate DateTime  @map("enrollment_date")
  status         String
  completionDate DateTime? @map("completion_date")
  method         String

  // Relations
  courseId     String        @db.ObjectId
  course       Course        @relation(fields: [courseId], references: [id])
  studentId    String        @db.ObjectId
  student      User          @relation(fields: [studentId], references: [id])
  certificates Certificate[]
}

model Certificate {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  certificateLink String @map("certificate_link")

  // Relations
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  courseId     String     @db.ObjectId
  enrollmentId String     @db.ObjectId
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
}

// MARK: User Feedback
model Testimonial {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  rating  Int

  // Relations
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
}

// MARK: Live Sessions
model Live {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  thumbnail    String
  videoId      String   @map("video_id")
  slug         String
  schedule     DateTime
  quizId       String?  @map("quiz_id")
  instructorId String   @map("instructor_id")
}

// MARK: Reporting and Analytics
model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  totalCompletedLessons String[] @db.ObjectId
  totalCompletedModules String[] @map("totalCompletedModeules") @db.ObjectId

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])

  studentId String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])

  assessmentId String?     @unique @db.ObjectId
  assessment   Assessment? @relation(name: "ReportAssessment", fields: [assessmentId], references: [id])
}
