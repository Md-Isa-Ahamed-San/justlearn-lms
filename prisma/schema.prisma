// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  STUDENT    @map("student")
  INSTRUCTOR @map("instructor")
  ADMIN      @map("admin")
}

// MARK: User C
model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String
  password             String
  email                String    @unique
  phone                String?
  role                 Role
  bio                  String?
  designation          String?
  profilePicture       String?
  socialMedia          Json?
  resetPasswordToken   String? // Added for forgot password functionality
  resetPasswordExpires DateTime?

  // Relations
  coursesAsInstructor Course[]        @relation("InstructorCourses")
  enrollments         Enrollment[]
  testimonials        Testimonial[]
  watches             Watch[]
  certificates        Certificate[]
  reports             Report[]
  feedback            Feedback[] // Added relation
  participations      Participation[] // Added relation

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

// MARK: Course C
model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String?
  description String
  thumbnail   String?
  price       Int       @default(0)
  active      Boolean   @default(false)
  learning    String[]
  isActive    Boolean?   @default(true)
  rating      Float? // Added for filtering
  popularity  Int? // Added for sorting by popularity
  lastUpdated DateTime? // Added for "Last updated date"
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // ðŸ”— Relations
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  instructor   User   @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String @db.ObjectId

  weeks          Week[]
  testimonials   Testimonial[]
  enrollments    Enrollment[]
  quizSet        QuizSet?        @relation(fields: [quizSetId], references: [id])
  quizSetId      String?         @db.ObjectId
  reports        Report[]
  participations Participation[] // Added relation
}

// MARK: Category C
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  thumbnail   String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  courses     Course[]
}

// MARK: Week
model Week {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      String    @default("not-active")
  slug        String
  duration    Int
  order       Int // Added: For sequencing weeks
  quizPrompt  String? // Added: Instructor's prompt for AI quiz
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  String     @db.ObjectId
  lessons   Lesson[]
  resources Resource[] // Added relation
  watches   Watch[]
  feedback  Feedback[] // Added relation
  quizzes   Quiz[] // Added relation
}

// MARK: Lesson
model Lesson {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int       @default(0)
  videoUrl    String?   @map("video_url")
  active      Boolean   @default(false)
  slug        String
  access      String    @default("private")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations - fixed relation to be many-to-one with Week

  week   Week   @relation(fields: [weekId], references: [id]) // âœ… Foreign key & relation name
  weekId String @db.ObjectId

  watches Watch[]
}

// MARK: Watch
model Watch {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  state     String    @default("started")
  lastTime  Int       @map("last_time")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  lessonId String  @db.ObjectId
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  userId   String  @db.ObjectId
  user     User    @relation(fields: [userId], references: [id])
  weekId   String? @db.ObjectId
  week     Week?   @relation(fields: [weekId], references: [id])
}

// MARK: Quiz
model Quiz {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  version     Int       @default(1) // For quiz versioning
  published   Boolean   @default(false) // Published/draft status
  slug        String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  weekId          String?          @db.ObjectId
  week            Week?            @relation(fields: [weekId], references: [id])
  questions       Question[] // Added relation
  quizSets        QuizSet[]        @relation(fields: [quizSetIds], references: [id])
  quizSetIds      String[]         @db.ObjectId
  assessmentItems AssessmentItem[]
}

// MARK: QuizSet
model QuizSet {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  slug        String
  active      Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  quizzes Quiz[]   @relation(fields: [quizIds], references: [id])
  quizIds String[] @db.ObjectId
  courses Course[]
}

// MARK: Feedback
model Feedback {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  quizScore   Float
  suggestions String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  studentId String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])
  weekId    String @db.ObjectId
  week      Week   @relation(fields: [weekId], references: [id])
}

// MARK: Participation
model Participation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  progress  Json[] // Array of {weekId, completed, score}
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  courseId  String @db.ObjectId
  course    Course @relation(fields: [courseId], references: [id])
  studentId String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])
}

// MARK: Question
model Question {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String // "MCQ", "TF", "short"
  prompt      String
  choices     Json? // For MCQ questions
  answer      String
  explanation String // AI-generated explanation
  mark        Int       @default(1)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

// MARK: Resource
model Resource {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      String // "text", "pdf", "video", "link"
  url       String?
  content   String? // For text resources
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  weekId String @db.ObjectId
  week   Week   @relation(fields: [weekId], references: [id])
}

// MARK: Assessment
model Assessment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  otherMarks Int
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  // Relations
  items  AssessmentItem[]
  report Report?          @relation(name: "ReportAssessment")
}

// MARK: AssessmentItem
model AssessmentItem {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  attempted Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  assessmentId String     @db.ObjectId
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  options Option[] // one-to-many
}

// MARK: Option
model Option {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  option           String
  isCorrect        Boolean
  isSelected       Boolean
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @updatedAt
  assessmentItemId String         @db.ObjectId
  assessmentItem   AssessmentItem @relation(fields: [assessmentItemId], references: [id])
}

// MARK: Enrollment and Certification
model Enrollment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  enrollmentDate DateTime  @map("enrollment_date")
  status         String
  completionDate DateTime? @map("completion_date")
  method         String
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  // Relations
  courseId     String        @db.ObjectId
  course       Course        @relation(fields: [courseId], references: [id])
  studentId    String        @db.ObjectId
  student      User          @relation(fields: [studentId], references: [id])
  certificates Certificate[]
}

// MARK: Certificate
model Certificate {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  certificateLink String    @map("certificate_link")
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  // Relations
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  courseId     String     @db.ObjectId
  enrollmentId String     @db.ObjectId
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
}

// MARK: Testimonial
model Testimonial {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
}

// MARK: Live Sessions
model Live {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  thumbnail    String
  videoId      String    @map("video_id")
  slug         String
  schedule     DateTime
  quizId       String?   @map("quiz_id")
  instructorId String    @map("instructor_id")
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
}

// MARK: Reporting and Analytics
model Report {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  totalCompletedLessons String[] @db.ObjectId
  totalCompletedModules String[] @map("totalCompletedModeules") @db.ObjectId

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])

  studentId String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])

  assessmentId String?     @unique @db.ObjectId
  assessment   Assessment? @relation(name: "ReportAssessment", fields: [assessmentId], references: [id])
}
